{"/home/travis/build/npmtest/node-npmtest-isparta/test.js":"/* istanbul instrument in package npmtest_isparta */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-isparta/lib.npmtest_isparta.js":"/* istanbul instrument in package npmtest_isparta */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_isparta = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_isparta = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-isparta/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-isparta && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_isparta */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_isparta\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_isparta.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_isparta.rollup.js'] =\n            local.assetsDict['/assets.npmtest_isparta.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_isparta.__dirname + '/lib.npmtest_isparta.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-isparta/node_modules/isparta/lib/isparta.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _istanbul = require('istanbul');\n\nObject.defineProperty(exports, 'Store', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.Store;\n  }\n});\nObject.defineProperty(exports, 'Collector', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.Collector;\n  }\n});\nObject.defineProperty(exports, 'hook', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.hook;\n  }\n});\nObject.defineProperty(exports, 'Report', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.Report;\n  }\n});\nObject.defineProperty(exports, 'config', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.config;\n  }\n});\nObject.defineProperty(exports, 'Reporter', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.Reporter;\n  }\n});\nObject.defineProperty(exports, 'utils', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.utils;\n  }\n});\nObject.defineProperty(exports, 'matcherFor', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.matcherFor;\n  }\n});\nObject.defineProperty(exports, 'Writer', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.Writer;\n  }\n});\nObject.defineProperty(exports, 'ContentWriter', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.ContentWriter;\n  }\n});\nObject.defineProperty(exports, 'FileWriter', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.FileWriter;\n  }\n});\nObject.defineProperty(exports, '_yuiLoadHook', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul._yuiLoadHook;\n  }\n});\nObject.defineProperty(exports, 'TreeSummarizer', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.TreeSummarizer;\n  }\n});\nObject.defineProperty(exports, 'assetsDir', {\n  enumerable: true,\n  get: function get() {\n    return _istanbul.assetsDir;\n  }\n});\n\nvar _instrumenter = require('./instrumenter');\n\nObject.defineProperty(exports, 'Instrumenter', {\n  enumerable: true,\n  get: function get() {\n    return _instrumenter.Instrumenter;\n  }\n});\n\nvar _package = require('../package.json');\n\nObject.defineProperty(exports, 'VERSION', {\n  enumerable: true,\n  get: function get() {\n    return _package.VERSION;\n  }\n});","/home/travis/build/npmtest/node-npmtest-isparta/node_modules/isparta/lib/instrumenter.js":"'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Instrumenter = undefined;\n\nvar _istanbul = require('istanbul');\n\nvar _istanbul2 = _interopRequireDefault(_istanbul);\n\nvar _babelCore = require('babel-core');\n\nvar _esprima = require('esprima');\n\nvar _esprima2 = _interopRequireDefault(_esprima);\n\nvar _escodegen = require('escodegen');\n\nvar _escodegen2 = _interopRequireDefault(_escodegen);\n\nvar _sourceMap = require('source-map');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\nvar POSITIONS = ['start', 'end'];\n\nvar Instrumenter = exports.Instrumenter = (function (_istanbul$Instrumente) {\n  _inherits(Instrumenter, _istanbul$Instrumente);\n\n  function Instrumenter() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Instrumenter);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Instrumenter).call(this));\n\n    _istanbul2.default.Instrumenter.call(_this, options);\n\n    _this.babelOptions = _extends({\n      sourceMap: true\n    }, options && options.babel || {});\n    return _this;\n  }\n\n  _createClass(Instrumenter, [{\n    key: 'instrumentSync',\n    value: function instrumentSync(code, fileName) {\n\n      var result = this._r = (0, _babelCore.transform)(code, _extends({}, this.babelOptions, { filename: fileName }));\n      this._babelMap = new _sourceMap.SourceMapConsumer(result.map);\n\n      // PARSE\n      var program = _esprima2.default.parse(result.code, {\n        loc: true,\n        range: true,\n        tokens: this.opts.preserveComments,\n        comment: true\n      });\n\n      if (this.opts.preserveComments) {\n        program = _escodegen2.default.attachComments(program, program.comments, program.tokens);\n      }\n\n      return this.instrumentASTSync(program, fileName, code);\n    }\n  }, {\n    key: 'getPreamble',\n    value: function getPreamble(sourceCode, emitUseStrict) {\n      var _this2 = this;\n\n      [['s', 'statementMap'], ['f', 'fnMap'], ['b', 'branchMap']].forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var metricName = _ref2[0];\n        var metricMapName = _ref2[1];\n        var metrics = _this2.coverState[metricName];\n        var metricMap = _this2.coverState[metricMapName];\n\n        var transformFctName = '_' + metricMapName + 'Transformer';\n        var transformedMetricMap = _this2[transformFctName](metricMap, metrics);\n        _this2.coverState[metricMapName] = transformedMetricMap;\n      });\n\n      return _get(Object.getPrototypeOf(Instrumenter.prototype), 'getPreamble', this).call(this, sourceCode, emitUseStrict);\n    }\n\n    ////\n\n  }, {\n    key: '_statementMapTransformer',\n    value: function _statementMapTransformer(metrics) {\n      var _this3 = this;\n\n      return Object.keys(metrics).map(function (index) {\n        return metrics[index];\n      }).map(function (statementMeta) {\n        var _getMetricOriginalLoc = _this3._getMetricOriginalLocations([statementMeta]);\n\n        var _getMetricOriginalLoc2 = _slicedToArray(_getMetricOriginalLoc, 1);\n\n        var location = _getMetricOriginalLoc2[0];\n\n        return location;\n      }).reduce(this._arrayToArrayLikeObject, {});\n    }\n  }, {\n    key: '_fnMapTransformer',\n    value: function _fnMapTransformer(metrics) {\n      var _this4 = this;\n\n      return Object.keys(metrics).map(function (index) {\n        return metrics[index];\n      }).map(function (fnMeta) {\n        var _getMetricOriginalLoc3 = _this4._getMetricOriginalLocations([fnMeta.loc]);\n\n        var _getMetricOriginalLoc4 = _slicedToArray(_getMetricOriginalLoc3, 1);\n\n        var loc = _getMetricOriginalLoc4[0];\n\n        // Force remove the last skip key\n\n        if (fnMeta.skip === undefined) {\n          delete fnMeta.skip;\n          if (loc.skip !== undefined) {\n            fnMeta.skip = loc.skip;\n          }\n        }\n\n        return _extends({}, fnMeta, { loc: loc });\n      }).reduce(this._arrayToArrayLikeObject, {});\n    }\n  }, {\n    key: '_branchMapTransformer',\n    value: function _branchMapTransformer(metrics) {\n      var _this5 = this;\n\n      return Object.keys(metrics).map(function (index) {\n        return metrics[index];\n      }).map(function (branchMeta) {\n        return _extends({}, branchMeta, {\n          locations: _this5._getMetricOriginalLocations(branchMeta.locations)\n        });\n      }).reduce(this._arrayToArrayLikeObject, {});\n    }\n\n    ////\n\n  }, {\n    key: '_getMetricOriginalLocations',\n    value: function _getMetricOriginalLocations() {\n      var _this6 = this;\n\n      var metricLocations = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n      var o = { line: 0, column: 0 };\n\n      return metricLocations.map(function (generatedPositions) {\n        return [_this6._getOriginalPositionsFor(generatedPositions), generatedPositions];\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        var _ref4$ = _ref4[0];\n        var start = _ref4$.start;\n        var end = _ref4$.end;\n        var generatedPosition = _ref4[1];\n\n        var postitions = [start.line, start.column, end.line, end.column];\n        var isValid = postitions.every(function (n) {\n          return n !== null;\n        });\n\n        // Matches behavior in _fnMapTransformer above.\n        if (generatedPosition.skip === undefined) {\n          delete generatedPosition.skip;\n        }\n\n        return isValid ? _extends({}, generatedPosition, { start: start, end: end }) : { start: o, end: o, skip: true };\n      });\n    }\n  }, {\n    key: '_getOriginalPositionsFor',\n    value: function _getOriginalPositionsFor() {\n      var _this7 = this;\n\n      var generatedPositions = arguments.length <= 0 || arguments[0] === undefined ? { start: {}, end: {} } : arguments[0];\n\n      return POSITIONS.map(function (position) {\n        return [generatedPositions[position], position];\n      }).reduce(function (originalPositions, _ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n\n        var generatedPosition = _ref6[0];\n        var position = _ref6[1];\n\n        var originalPosition = _this7._babelMap.originalPositionFor(generatedPosition);\n        // remove extra keys\n        delete originalPosition.name;\n        delete originalPosition.source;\n        originalPositions[position] = originalPosition;\n        return originalPositions;\n      }, {});\n    }\n  }, {\n    key: '_arrayToArrayLikeObject',\n    value: function _arrayToArrayLikeObject(arrayLikeObject, item, index) {\n      arrayLikeObject[index + 1] = item;\n      return arrayLikeObject;\n    }\n  }]);\n\n  return Instrumenter;\n})(_istanbul2.default.Instrumenter);","/home/travis/build/npmtest/node-npmtest-isparta/node_modules/isparta/lib/cli/ArgParser.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _nomnomnomnom = require('nomnomnomnom');\n\nvar _nomnomnomnom2 = _interopRequireDefault(_nomnomnomnom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n\nexports.default = ArgParser;\n\n//\n\n//\n\nfunction ArgParser(commands) {\n  var parser = (0, _nomnomnomnom2.default)();\n\n  parser.command('cover').help(\"transparently adds coverage information to a node command. Saves coverage.json and reports at the end of execution\").option('cmd', {\n    required: true,\n    position: 1,\n    help: 'ES6 js files to cover (using babel)'\n  }).option('config', {\n    metavar: '<path-to-config>',\n    help: 'the configuration file to use, defaults to .istanbul.yml'\n  }).option('default-excludes', {\n    flag: true,\n    help: 'apply default excludes [ **/node_modules/**, **/test/**, **/tests/** ]'\n  }).option('excludes', {\n    abbr: 'x',\n    default: [],\n    help: 'one or more fileset patterns e.g. \"**/vendor/**\"',\n    list: true,\n    metavar: '<exclude-pattern>'\n  }).option('report', {\n    default: 'lcv',\n    metavar: '<format>',\n    list: true,\n    help: 'report format'\n  }).option('root', {\n    metavar: '<path>',\n    help: 'the root path to look for files to instrument'\n  }).option('include', {\n    default: ['**/*.js'],\n    metavar: '<include-pattern>',\n    list: true,\n    abbr: 'i',\n    help: 'one or more fileset patterns e.g. \\'**/*.js\\''\n  }).option('verbose', {\n    flag: true,\n    abbr: 'v',\n    help: 'verbose mode'\n  }).option('include-all-sources', {\n    flag: true,\n    help: 'instrument all unused sources after running tests'\n  }).callback(commands.cover);\n\n  return parser;\n}"}